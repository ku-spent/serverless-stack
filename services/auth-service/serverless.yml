service: spent-service-auth

frameworkVersion: '2'

plugins:
  # serverless reserve $ then use pseudo to interpolate # -> $
  - serverless-pseudo-parameters
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: ap-southeast-1
  tracing:
    apiGateway: true
    lambda: true
  environment:
    USER_TABLE_NAME: ${self:custom.dynamodbUserTableName}
  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}

resources:
  - Outputs:
      AuthorizerArn:
        Value: ${self:custom.authorizerArn}
        Export:
          Name: ${self:custom.stage}-ExtAuthorizerArn

functions:
  auth:
    handler: src/handlers/auth.handler
  postSignup:
    handler: src/handlers/authPostConfirm.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolId}
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:DescribeTable
        Resource: 'arn:aws:dynamodb:ap-southeast-1:*:*'
