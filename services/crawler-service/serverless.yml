service: spent-service-crawler

frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-dynamodb-autoscaling

package:
  individually: true
  exclude:
    - node_modules/**

provider:
  name: aws
  runtime: python3.8
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: ap-southeast-1
  tracing:
    apiGateway: true
    lambda: true
  environment:
    ELASTICSEACH_HOST: !ImportValue ${self:custom.spentApp}-ExtElasticsearchEndpoint
    SOURCE_SANOOK: ${self:custom.sourceSanook}
    SOURCE_THAIPBS: ${self:custom.sourceThaipbs}
    SOURCE_MATICHON: ${self:custom.sourceMatichon}
    SOURCE_VOICETV: ${self:custom.sourceVoicetv}
    SOURCE_BEARTAI: ${self:custom.sourceBeartai}
    SOURCE_HACKERNOON: ${self:custom.sourceHackernoon}
    WEB_ES_INDEX: ${self:custom.es.webIndex}
    GOOGLE_ES_INDEX: ${self:custom.es.googleIndex}
    QUEUE_URL: { Ref: CrawlerQueue }
  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}

custom:
  pythonRequirements:
    layer: true
    useStaticCache: true
    dockerizePip: non-linux

  crawConfig:
    timeout: 120
    rate: rate(10 minutes)

  es:
    webIndex: 'rss-feed-3'

  sqs:
    arn: !GetAtt CrawlerQueue.Arn

  capacities:
    - table: NewsUrl # DynamoDB Resource
      read:
        minimum: 2 # Minimum read capacity
        maximum: 10 # Maximum read capacity
        usage: 0.75 # Targeted usage percentage
      write:
        minimum: 2 # Minimum write capacity
        maximum: 10 # Maximum write capacity
        usage: 0.5 # Targeted usage percentage

  dynamodb:
    start:
      migration:
        dir: 'dynamodbMigrations'
        table_prefix: ''
        table_suffix: ''
    stages:
      - dev

  stage: ${file(../../serverless.common.yml):custom.stage}
  spentApp: ${file(../../serverless.common.yml):custom.spentApp}
  spentAppMapping: ${file(../../serverless.common.yml):custom.spentAppMapping}
  sourceSanook: 'สนุกดอทคอม'
  sourceThaipbs: 'thaipbs'
  sourceMatichon: 'มติชน'
  sourceVoicetv: 'Voice TV'
  sourceBeartai: 'beartai'
  sourceHackernoon: 'hackernoon'
  lambdaIam:
    - Effect: Allow
      Action:
        - sqs:*
      Resource: ${self:custom.sqs.arn}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '*'
    - Effect: Allow
      Action:
        - es:*
      Resource:
        - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
        - !Join
          - ''
          - - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
            - '/*'

resources:
  - ${file(resources/sqs-resource.yml)}
  - ${file(resources/dynamodb-resource.yml)}
  - Output:
      CrawlerSQS:
        Value:
          Ref: CrawlerQueue
        Export:
          Name: ${self:custom.stage}-ExtCrawlerSQS

functions:
  crawler:
    handler: 'handler.run'
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: ${self:custom.crawConfig.timeout}
    iamRoleStatements: ${self:custom.lambdaIam}
    events:
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
          input:
            source: ${self:custom.sourceSanook}
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
          input:
            source: ${self:custom.sourceMatichon}
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
          input:
            source: ${self:custom.sourceVoicetv}
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
          input:
            source: ${self:custom.sourceBeartai}
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
          input:
            source: ${self:custom.sourceHackernoon}
  send:
    handler: 'send_handler.run'
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: ${self:custom.crawConfig.timeout}
    iamRoleStatements: ${self:custom.lambdaIam}
    events:
      - sqs:
          arn: ${self:custom.sqs.arn}
          batchSize: 10
          maximumBatchingWindow: 60
