service: spent-service-crawler

frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-step-functions

package:
  individually: true

provider:
  name: aws
  runtime: python3.8
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: ap-southeast-1
  tracing:
    apiGateway: true
    lambda: true
  environment:
    ELASTICSEACH_HOST: !ImportValue ${self:custom.spentApp}-ExtElasticsearchEndpoint
    REDIS_HOST: !GetAtt ElasticCacheCluster.RedisEndpoint.Address
    SOURCE_SANOOK: ${self:custom.sourceSanook}
    SOURCE_THAIPBS: ${self:custom.sourceThaipbs}
    SOURCE_MATICHON: ${self:custom.sourceMatichon}
    SOURCE_VOICETV: ${self:custom.sourceVoicetv}
    SOURCE_BEARTAI: ${self:custom.sourceBeartai}
    ES_INDEX: ${self:custom.es.index}
  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}

custom:
  pythonRequirements:
    layer: true
    useStaticCache: true
    dockerizePip: non-linux

  crawConfig:
    timeout: 90
    rate: rate(5 minutes)

  es:
    index: 'rss-feed-3'

  stage: ${file(../../serverless.common.yml):custom.stage}
  spentApp: ${file(../../serverless.common.yml):custom.spentApp}
  spentAppMapping: ${file(../../serverless.common.yml):custom.spentAppMapping}
  sourceSanook: 'สนุกดอทคอม'
  sourceThaipbs: 'thaipbs'
  sourceMatichon: 'มติชน'
  sourceVoicetv: 'Voice TV'
  sourceBeartai: 'beartai'
  config:
    CACHE_INSTANCE_SIZE: cache.t2.micro
  lambdaVPC:
    securityGroupIds:
      - !GetAtt ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: PrivateSubnetA
  fullAccessElasticsearch:
    - Effect: Allow
      Action:
        - es:*
      Resource:
        - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
        - !Join
          - ''
          - - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
            - '/*'

resources:
  - ${file(vpc-resource.yml)}

stepFunctions:
  stateMachines:
    crawler:
      events:
        - schedule:
            rate: ${self:custom.crawConfig.rate}
            enabled: true
            input:
              source: ${self:custom.sourceSanook}
        - schedule:
            rate: ${self:custom.crawConfig.rate}
            enabled: true
            input:
              source: ${self:custom.sourceMatichon}
        - schedule:
            rate: ${self:custom.crawConfig.rate}
            enabled: true
            input:
              source: ${self:custom.sourceVoicetv}
        - schedule:
            rate: ${self:custom.crawConfig.rate}
            enabled: true
            input:
              source: ${self:custom.sourceBeartai}
      definition:
        Comment: 'A crawler service'
        StartAt: Crawl
        States:
          Crawl:
            Type: Task
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-crawler'
            Next: Send
          Send:
            Type: Task
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-send'
            End: true

functions:
  crawler:
    handler: handler.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    vpc: ${self:custom.lambdaVPC}
    timeout: ${self:custom.crawConfig.timeout}
    iamRoleStatements: ${self:custom.fullAccessElasticsearch}
  send:
    handler: send_handler.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: ${self:custom.crawConfig.timeout}
    iamRoleStatements: ${self:custom.fullAccessElasticsearch}

  # crawl-sanook:
  #   handler: handler.run
  #   layers:
  #     - { Ref: PythonRequirementsLambdaLayer }
  #   vpc: ${self:custom.lambdaVPC}
  #   timeout: ${self:custom.crawConfig.timeout}
  #   events:
  #     - schedule:
  #         rate: ${self:custom.crawConfig.rate}
  #         enabled: false
  #         input:
  #           source: ${self:custom.sourceSanook}
  #   iamRoleStatements: ${self:custom.fullAccessElasticsearch}

  # crawl-voiceTV:
  #   handler: handler.run
  #   layers:
  #     - { Ref: PythonRequirementsLambdaLayer }
  #   vpc: ${self:custom.lambdaVPC}
  #   timeout: ${self:custom.crawConfig.timeout}
  #   events:
  #     - schedule:
  #         rate: ${self:custom.crawConfig.rate}
  #         enabled: false
  #         input:
  #           source: ${self:custom.sourceVoicetv}
  #   iamRoleStatements: ${self:custom.fullAccessElasticsearch}

  # crawl-matichon:
  #   handler: handler.run
  #   layers:
  #     - { Ref: PythonRequirementsLambdaLayer }
  #   vpc: ${self:custom.lambdaVPC}
  #   timeout: ${self:custom.crawConfig.timeout}
  #   events:
  #     - schedule:
  #         rate: ${self:custom.crawConfig.rate}
  #         enabled: false
  #         input:
  #           source: ${self:custom.sourceMatichon}
  #   iamRoleStatements: ${self:custom.fullAccessElasticsearch}

  # crawl-beartai:
  #   handler: handler.run
  #   layers:
  #     - { Ref: PythonRequirementsLambdaLayer }
  #   vpc: ${self:custom.lambdaVPC}
  #   timeout: ${self:custom.crawConfig.timeout}
  #   events:
  #     - schedule:
  #         rate: ${self:custom.crawConfig.rate}
  #         enabled: false
  #         input:
  #           source: ${self:custom.sourceBeartai}
  #   iamRoleStatements: ${self:custom.fullAccessElasticsearch}
