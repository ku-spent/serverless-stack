service: spent-service-user-api
# app and org for use with dashboard.serverless.com
# app: spent-resources
# org: thtiiz

frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin
  - serverless-dynamodb-autoscaling

package:
  individually: true
  exclude:
    - ./**
  include:
    - ./bin/**

provider:
  name: aws
  runtime: go1.x
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  tracing:
    apiGateway: true
    lambda: true
  apiGateway:
    restApiId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
  environment:
    DYNAMODB_TABLE_HISTORY: ${custom:dynamodb.tableHistory}
    DYNAMODB_TABLE_BLOCK: ${custom:dynamodb.tableBlock}
    DYNAMODB_TABLE_FOLLOWING: ${custom:dynamodb.tableFollowing}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:*'
        # - 'dynamodb:Scan'
        # - 'dynamodb:Query'
      Resource:
        - '*'

custom:
  stage: ${file(../../serverless.common.yml):custom.stage}
  spentApp: ${file(../../serverless.common.yml):custom.spentApp}
  spentAppMapping: ${file(../../serverless.common.yml):custom.spentAppMapping}

  capacities:
    - table: Following
      read:
        minimum: 2 # Minimum read capacity
        maximum: 15 # Maximum read capacity
        usage: 0.5 # Targeted usage percentage
      write:
        minimum: 2 # Minimum write capacity
        maximum: 15 # Maximum write capacity
        usage: 0.5 # Targeted usage percentage

  dynamodb:
    tableHistory: ${env:DYNAMODB_TABLE_HISTORY}
    tableBlock: ${env:DYNAMODB_TABLE_BLOCK}
    tableFollowing: ${env:DYNAMODB_TABLE_FOLLOWING}

resources:
  - ${file(dynamodb.yml)}

functions:
  users:
    handler: bin/users
    events:
      - http:
          path: /users/{proxy+}
          method: ANY
