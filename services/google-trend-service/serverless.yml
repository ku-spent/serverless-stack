service: spent-service-crawler-trend

frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-offline

package:
  individually: true
  exclude:
    - node_modules/**

provider:
  name: aws
  runtime: python3.8
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: ap-southeast-1
  apiGateway:
    restApiId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
  tracing:
    apiGateway: true
    lambda: true
  environment:
    EXTERNAL_TRENDS_ES_INDEX: ${self:custom.es.externalIndex}
    ELASTICSEACH_HOST: !ImportValue ${self:custom.spentApp}-ExtElasticsearchEndpoint

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - es:*
      Resource:
        - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
        - !Join
          - ''
          - - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
            - '/*'

custom:
  pythonRequirements:
    layer: true
    useStaticCache: true
    dockerizePip: non-linux

  crawConfig:
    timeout: 30
    rate: rate(1 hour)

  es:
    externalIndex: 'external-trends-2'

  stage: ${file(../../serverless.common.yml):custom.stage}
  spentApp: ${file(../../serverless.common.yml):custom.spentApp}
  spentAppMapping: ${file(../../serverless.common.yml):custom.spentAppMapping}

functions:
  externalTrendsCrawler:
    handler: crawler.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - schedule:
          rate: ${self:custom.crawConfig.rate}
          enabled: true
  latestTrending:
    handler: 'latest_trending.handler'
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

resources:
  Outputs:
    LatestTrendingName:
      Value: !Ref LatestTrendingLambdaFunction
      Export:
        Name: ${self:custom.stage}-ExtLatestTrendingName
    LatestTrendingArn:
      Value: !GetAtt LatestTrendingLambdaFunction.Arn
      Export:
        Name: ${self:custom.stage}-ExtLatestTrendingArn
