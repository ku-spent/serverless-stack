service: spent-service-feed

frameworkVersion: '2'

plugins:
  # serverless reserve $ then use pseudo to interpolate # -> $
  - serverless-pseudo-parameters
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-api-gateway-caching
  - serverless-layers
  - serverless-deployment-bucket

package:
  individually: true

custom:
  stage: ${file(../../serverless.common.yml):custom.stage}
  spentApp: ${file(../../serverless.common.yml):custom.spentApp}
  spentAppMapping: ${file(../../serverless.common.yml):custom.spentAppMapping}
  userPoolId: ${file(../../serverless.common.yml):custom.userPoolId}
  userPoolArn: ${file(../../serverless.common.yml):custom.userPoolArn}
  authorizer: ${file(../../serverless.common.yml):custom.authorizer}
  authorizerArn: ${file(../../serverless.common.yml):custom.authorizerArn}

  apiGatewayCaching:
    enabled: false

  serverless-layers:
    dependenciesPath: ./package.json

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  tracing:
    apiGateway: true
    lambda: true
  deploymentBucket:
    name: ${self:service}-deployment-bucket
  environment:
    TREND_LAMBDA_NAME: !ImportValue ${self:custom.stage}-ExtLatestTrendingName
    ES_INDEX: rss-feed-3
    USERPOOL_ID: ${self:custom.userPoolId}
    ES_HOST: !ImportValue ${self:custom.spentApp}-ExtElasticsearchEndpoint
  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - es:*
      Resource:
        - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
        - !Join
          - ''
          - - !ImportValue ${self:custom.spentApp}-ExtElasticsearchArn
            - '/*'
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: !ImportValue ${self:custom.stage}-ExtLatestTrendingArn

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}

  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.stage}-ExtApiGatewayRestApiId
      ApiGatewayRestApiRootResourceId:
        Value: !GetAtt ApiGatewayRestApi.RootResourceId
        Export:
          Name: ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

functions:
  hello:
    handler: src/handlers/hello.handler
    events:
      - http:
          method: GET
          path: feed/hello
          authorizer: ${self:custom.authorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:*
        Resource:
          - ${self:custom.userPoolArn}

  similarNews:
    handler: src/handlers/similar.handler
    memorySize: 128
    events:
      - http:
          method: GET
          path: /news/related
          authorizer: ${self:custom.authorizer}

  newsID:
    handler: src/handlers/newsByID.handler
    memorySize: 128
    timeout: 20
    events:
      - http:
          method: GET
          path: /news2/{id}

  news:
    handler: src/handlers/news.handler
    memorySize: 128
    timeout: 20
    events:
      - http:
          method: GET
          path: /news
          # authorizer: ${self:custom.authorizer}
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.querystring.query
              - name: request.querystring.queryField
              - name: request.querystring.from
              - name: request.querystring.size

  news2:
    handler: src/handlers/news2.handler
    memorySize: 128
    timeout: 20
    events:
      - http:
          method: GET
          path: /news2
          # authorizer: ${self:custom.authorizer}
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.querystring.query
              - name: request.querystring.queryField
              - name: request.querystring.from
              - name: request.querystring.size
              - name: request.querystring.lastEvaluatedKey

  search:
    handler: src/handlers/search.handler
    memorySize: 128
    events:
      - http:
          method: GET
          path: /search
          authorizer: ${self:custom.authorizer}

  trending:
    handler: src/handlers/trends/trending.handler
    timeout: 10
    events:
      - http:
          method: GET
          path: /trending
          authorizer: ${self:custom.authorizer}
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.querystring.from
              - name: request.querystring.size

  releatedInTrend:
    handler: src/handlers/trends/relatedInTrend.handler
    timeout: 10
    events:
      - http:
          method: GET
          path: /trending/related
          authorizer: ${self:custom.authorizer}
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.querystring.from
              - name: request.querystring.size
              - name: request.querystring.trend
